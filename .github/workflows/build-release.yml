name: Build and Release iosevka-sc

on:
  schedule:
    # Check for new Iosevka releases daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      iosevka_version:
        description: 'Iosevka version to build (e.g., v32.3.1)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      latest_version: ${{ steps.check.outputs.latest_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new Iosevka release
        id: check
        run: |
          # Fetch latest tag once
          LATEST=$(curl -s https://api.github.com/repos/be5invis/Iosevka/releases/latest | jq -r .tag_name)
          echo "Latest Iosevka version: $LATEST"

          if [ "${{ inputs.iosevka_version }}" = "latest" ]; then
            echo "Manual trigger with 'latest'; building $LATEST"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ -n "${{ inputs.iosevka_version }}" ]; then
            echo "Manual trigger with explicit version ${{ inputs.iosevka_version }}"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=${{ inputs.iosevka_version }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "${GITHUB_EVENT_NAME}" = "workflow_dispatch" ]; then
            echo "Manual trigger with blank input; forcing build of latest ($LATEST)"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST" >> $GITHUB_OUTPUT
            exit 0
          fi

          EXISTING=$(git ls-remote --tags origin | grep -o "refs/tags/$LATEST" || true)
          if [ -z "$EXISTING" ]; then
            echo "New version found: $LATEST"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST" >> $GITHUB_OUTPUT
          else
            echo "Version $LATEST already built"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
  build:
    needs: check-new-release
    if: needs.check-new-release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clone Iosevka
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          git clone --depth 1 --branch $VERSION https://github.com/be5invis/Iosevka.git iosevka-build

      - name: Copy build plan
        run: cp private-build-plans.toml iosevka-build/

      - name: Install Iosevka dependencies
        run: |
          cd iosevka-build
          npm install

      - name: Build iosevka-sc
        run: |
          cd iosevka-build
          npm run build -- ttf-unhinted::iosevka-sc

      - name: Setup Python for Nerd Fonts patcher
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clone Nerd Fonts
        run: |
          git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git

      - name: Install FontForge
        run: |
          sudo apt-get update
          sudo apt-get install -y fontforge python3-fontforge

      - name: Patch fonts with Nerd Fonts
        run: |
          mkdir -p patched-fonts
          cd nerd-fonts
          # Check if TTF files exist
          if ! ls ../iosevka-build/dist/iosevka-sc/TTF-Unhinted/*.ttf 1> /dev/null 2>&1; then
            echo "ERROR: No TTF files found in ../iosevka-build/dist/iosevka-sc/TTF-Unhinted/"
            echo "Checking build output structure:"
            ls -la ../iosevka-build/dist/ || echo "dist directory not found"
            ls -la ../iosevka-build/dist/iosevka-sc/ || echo "iosevka-sc directory not found"
            exit 1
          fi
          # Create post-process script to remove NerdFont from filename
          cat > rename-font.sh << 'EOF'
          #!/bin/bash
          patched_font="$1"
          new_name=$(echo "$patched_font" | sed 's/IosevkaScNerdFont/iosevka-sc/g')
          if [ "$patched_font" != "$new_name" ]; then
            mv "$patched_font" "$new_name"
          fi
          EOF
          chmod +x rename-font.sh
          for font in ../iosevka-build/dist/iosevka-sc/TTF-Unhinted/*.ttf; do
            echo "Patching $(basename "$font")"
            fontforge -script font-patcher "$font" \
              --makegroups 5 \
              --quiet \
              --complete \
              --careful \
              --postprocess ./rename-font.sh \
              --outputdir ../patched-fonts
          done
          ls ../patched-fonts

      - name: Create release directory structure
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          mkdir -p release
          cd release

          # Create archives
          tar -czf iosevka-sc-$VERSION.tar.gz -C ../patched-fonts .
          cd ../patched-fonts
          zip -r ../release/iosevka-sc-$VERSION.zip .

          # Calculate checksums
          cd ../release
          sha256sum *.tar.gz > checksums.txt
          sha256sum *.zip >> checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-new-release.outputs.latest_version }}
          name: iosevka-sc ${{ needs.check-new-release.outputs.latest_version }}
          body: |
            iosevka-sc built from Iosevka ${{ needs.check-new-release.outputs.latest_version }}

            ## Installation

            ### macOS (Homebrew)
            ```bash
            brew tap smchunn/tap
            brew install --cask font-iosevka-sc
            ```

            ### Arch Linux (AUR)
            ```bash
            yay -S iosevka-sc
            ```

            ### Manual Installation
            Download the appropriate archive for your system and extract the fonts to your system fonts directory.

            ## Checksums
            See `checksums.txt` for SHA256 checksums of all archives.
          files: |
            release/*.tar.gz
            release/*.zip
            release/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clone Homebrew tap repository
        run: |
          git clone https://${{ secrets.TAP_REPO_TOKEN }}@github.com/smchunn/homebrew-tap.git tap-repo

      - name: Update Homebrew tap
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          REPO="${{ github.repository }}"
          SHA256=$(sha256sum release/*.tar.gz | cut -d' ' -f1)

          # Generate font stanzas from patched fonts
          FONT_STANZAS=""
          for font in patched-fonts/*.ttf; do
            FONT_NAME=$(basename "$font")
            FONT_STANZAS="${FONT_STANZAS}  font \"${FONT_NAME}\"\n"
          done

          # Update Cask
          cat > tap-repo/Casks/font-iosevka-sc.rb << EOF
          cask "font-iosevka-sc" do
            version "${VERSION#v}"
            sha256 "$SHA256"

            url "https://github.com/$REPO/releases/download/$VERSION/iosevka-sc-$VERSION.tar.gz"
            name "iosevka-sc"
            desc "iosevka-sc custom build patched with Nerd Fonts"
            homepage "https://github.com/$REPO"

          $(echo -e "$FONT_STANZAS")
          end
          EOF

      - name: Commit and push to Homebrew tap
        run: |
          cd tap-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Casks/font-iosevka-sc.rb
          git commit -m "Update to ${{ needs.check-new-release.outputs.latest_version }}" || echo "No changes to commit"
          git push

      - name: Update AUR PKGBUILD
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          VERSION_NUM=$(echo $VERSION | sed 's/^v//')
          SHA256=$(sha256sum release/*.tar.gz | cut -d' ' -f1)

          sed -i "s/pkgver=.*/pkgver=$VERSION_NUM/" PKGBUILD
          sed -i "s/sha256sums=.*/sha256sums=('$SHA256')/" PKGBUILD

          git add PKGBUILD
          git commit -m "Update PKGBUILD for $VERSION" || echo "No changes to commit"
          git push || echo "No changes to push"
