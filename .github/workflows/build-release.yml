name: Build and Release Iosevka SC

on:
  schedule:
    # Check for new Iosevka releases daily at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      iosevka_version:
        description: 'Iosevka version to build (e.g., v32.3.1)'
        required: false
        type: string

jobs:
  check-new-release:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      latest_version: ${{ steps.check.outputs.latest_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new Iosevka release
        id: check
        run: |
          if [ -n "${{ inputs.iosevka_version }}" ]; then
            echo "Manual trigger with version ${{ inputs.iosevka_version }}"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=${{ inputs.iosevka_version }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get latest Iosevka release
          LATEST=$(curl -s https://api.github.com/repos/be5invis/Iosevka/releases/latest | jq -r .tag_name)
          echo "Latest Iosevka version: $LATEST"

          # Check if we already have this version
          EXISTING=$(git ls-remote --tags origin | grep -o "refs/tags/$LATEST" || echo "")

          if [ -z "$EXISTING" ]; then
            echo "New version found: $LATEST"
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "latest_version=$LATEST" >> $GITHUB_OUTPUT
          else
            echo "Version $LATEST already built"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-new-release
    if: needs.check-new-release.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Clone Iosevka
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          git clone --depth 1 --branch $VERSION https://github.com/be5invis/Iosevka.git iosevka-build

      - name: Copy build plan
        run: cp private-build-plans.toml iosevka-build/

      - name: Install Iosevka dependencies
        run: |
          cd iosevka-build
          npm install

      - name: Build Iosevka SC
        run: |
          cd iosevka-build
          npm run build -- ttf::iosevka-sc

      - name: Setup Python for Nerd Fonts patcher
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clone Nerd Fonts
        run: |
          git clone --depth 1 https://github.com/ryanoasis/nerd-fonts.git

      - name: Install Nerd Fonts dependencies
        run: |
          cd nerd-fonts
          pip install -r requirements.txt

      - name: Patch fonts with Nerd Fonts
        run: |
          mkdir -p patched-fonts
          cd nerd-fonts
          for font in ../iosevka-build/dist/iosevka-sc/TTF/*.ttf; do
            echo "Patching $(basename $font)"
            fontforge -script font-patcher "$font" \
              --complete \
              --careful \
              --progressbars \
              --outputdir ../patched-fonts
          done

      - name: Create release directory structure
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          mkdir -p release
          cd release

          # Create archives
          tar -czf iosevka-sc-nerd-font-$VERSION.tar.gz -C ../patched-fonts .
          cd ../patched-fonts
          zip -r ../release/iosevka-sc-nerd-font-$VERSION.zip .

          # Calculate checksums
          cd ../release
          sha256sum *.tar.gz > checksums.txt
          sha256sum *.zip >> checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-new-release.outputs.latest_version }}
          name: Iosevka SC Nerd Font ${{ needs.check-new-release.outputs.latest_version }}
          body: |
            Iosevka SC Nerd Font built from Iosevka ${{ needs.check-new-release.outputs.latest_version }}

            ## Installation

            ### macOS (Homebrew)
            ```bash
            brew tap smchunn/iosevka-sc
            brew install iosevka-sc-nerd-font
            ```

            ### Arch Linux (AUR)
            ```bash
            yay -S iosevka-sc-nerd-font
            ```

            ### Manual Installation
            Download the appropriate archive for your system and extract the fonts to your system fonts directory.

            ## Checksums
            See `checksums.txt` for SHA256 checksums of all archives.
          files: |
            release/*.tar.gz
            release/*.zip
            release/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Homebrew formula update
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          REPO_OWNER=$(echo ${{ github.repository }} | cut -d'/' -f1)

          # Update Homebrew formula with new version and checksums
          SHA256=$(sha256sum release/*.tar.gz | cut -d' ' -f1)

          cat > Formula/iosevka-sc-nerd-font.rb << EOF
          class IosevkaScNerdFont < Formula
            desc "Iosevka SC custom build patched with Nerd Fonts"
            homepage "https://github.com/${{ github.repository }}"
            url "https://github.com/${{ github.repository }}/releases/download/$VERSION/iosevka-sc-nerd-font-$VERSION.tar.gz"
            sha256 "$SHA256"
            version "$VERSION"

            def install
              (share/"fonts").install Dir["*.ttf"]
            end

            test do
              assert_path_exists share/"fonts"
            end
          end
          EOF

      - name: Commit and push Homebrew formula
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/iosevka-sc-nerd-font.rb
          git commit -m "Update Homebrew formula for ${{ needs.check-new-release.outputs.latest_version }}" || echo "No changes to commit"
          git push || echo "No changes to push"

      - name: Update AUR PKGBUILD
        run: |
          VERSION=${{ needs.check-new-release.outputs.latest_version }}
          VERSION_NUM=$(echo $VERSION | sed 's/^v//')
          SHA256=$(sha256sum release/*.tar.gz | cut -d' ' -f1)

          sed -i "s/pkgver=.*/pkgver=$VERSION_NUM/" PKGBUILD
          sed -i "s/sha256sums=.*/sha256sums=('$SHA256')/" PKGBUILD

          git add PKGBUILD
          git commit -m "Update PKGBUILD for $VERSION" || echo "No changes to commit"
          git push || echo "No changes to push"
